// Generated by CodiumAI

import { ToDoInterface } from '@interfaces/todo.interface';
import { ToDoService } from '@services/todo.service';
import { expect } from 'chai';
import { ObjectId } from 'mongodb';
import sinon from 'sinon';

describe('ToDoService', () => {
  it('should return an array of ToDoInterface objects when getTasks is called', () => {
    // Arrange
    const mockTasks: ToDoInterface[] = [
      { _id: new ObjectId(), title: 'Task 1' },
      { _id: new ObjectId(), title: 'Task 2' }
    ];
    const toDoService = new ToDoService();
    toDoService.getTasks = sinon.stub().resolves(mockTasks);

    // Act
    const result = toDoService.getTasks();

    // Assert
    return result.then((res) => {
      expect(res).to.deep.equal(mockTasks);
    });
  });

  it('should create a new ToDoInterface object and return it when createTask is called', async () => {
    // Arrange
    const mockTask: ToDoInterface = { _id: new ObjectId(), title: 'Task 1' };
    const mockBody: ToDoInterface = { title: 'Task 1' };
    const toDoService = new ToDoService();
    toDoService.createTask = sinon.stub().resolves(mockTask);

    // Act
    const result = await toDoService.createTask(mockBody);

    // Assert
    expect(result).to.deep.equal(mockTask);
  });

  it('should update an existing ToDoInterface object and return it when updateTask is called', async () => {
    // Arrange
    const mockTask: ToDoInterface = { _id: new ObjectId(), title: 'Task 1' };
    const mockBody: ToDoInterface = { title: 'Updated Task 1' };
    const toDoService = new ToDoService();
    toDoService.updateTask = sinon.stub().resolves(mockTask);

    // Act
    const result = await toDoService.updateTask(mockBody, '1');

    // Assert
    expect(result).to.deep.equal(mockTask);
  });

  it('should return an empty array when getTasks is called and there are no ToDoInterface objects in the database', async () => {
    const mockTasks: ToDoInterface[] = [];
    const toDoService = new ToDoService();
    toDoService.getTasks = sinon.stub().resolves(mockTasks);

    const result = await toDoService.getTasks();

    expect(result).to.deep.equal(mockTasks);
  });
});
